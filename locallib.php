<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
global $CFG;

/**
 * Library of interface functions and constants.
 *
 * @package     mod_aiquiz
 * @copyright   2024 Zakaria Lasry Sahraou zsahraoui20@gmail.com
 * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

use mod_assign\output\assign_header;
use mod_assignquiz\output\aiassign_submission_status;
require_once($CFG->dirroot.'/mod/assign/locallib.php');
require_once($CFG->dirroot.'/mod/assign/submission/comments/locallib.php');
require_once($CFG->dirroot.'/mod/assign/submission/file/locallib.php');
require_once($CFG->dirroot.'/mod/assign/renderable.php');
require_once($CFG->dirroot.'/mod/assign/submission/onlinetext/locallib.php');
require_once($CFG->dirroot . '/mod/assignquiz/classes/output/aiassign_submission_status.php');
class aiassign extends assign
{

    public function __construct($coursemodulecontext, $coursemodule, $course)
    {
        parent::__construct($coursemodulecontext, $coursemodule, $course);
        $this->submissionplugins = parent::get_submission_plugins(); //override the submission plugins with it's parent due to private access on the parent class
    }
    public function reformatnames(&$names) {
        foreach ($names as &$name) {
            $name = str_replace('assign', 'assignquiz', $name);
        }
        $pathcomments = $names[0]['comments'];
        $pathfile = $names[0]['file'];
        $pathonlinetext = $names[0]['onlinetext'];
        $names = ['comments' => $pathcomments, 'file' => $pathfile, 'onlinetext' => $pathonlinetext];  // Reformat the array
    }

    public function get_renderer()
    {
        global $PAGE;
        if ($this->output) {
            return $this->output;
        }
        $this->output = $PAGE->get_renderer('mod_assignquiz', null, RENDERER_TARGET_GENERAL);
        return $this->output;
    }

//    public function add_all_plugin_settings(MoodleQuickForm $mform) {
//        $mform->addElement('header', 'submissiontypes', get_string('submissiontypes', 'assign'));
//
//        $submissionpluginsenabled = array();
//        $group = $mform->addGroup(array(), 'submissionplugins', get_string('submissiontypes', 'assign'), array(' '), false);
//        foreach ($this->submissionplugins as $plugin) {
//            $this->add_plugin_settings2($plugin, $mform, $submissionpluginsenabled);
//        }
//        $group->setElements($submissionpluginsenabled);
//    }


    public function load_plugins($subtype) {
        global $CFG;
        $result = array();

        $names = [core_component::get_plugin_list($subtype)];
        $this->reformatnames($names);
//        $names = $names = [["comments" => $names['comments'],"file" => $names['file'],"onlinetext" => $names['onlinetext']]];//removing feedback from the list of plugins since we are not using it (feedback is generated by the ai and it will be for the quiz and not for the assignment)
        foreach ($names as $name => $path) {
            if (file_exists($path . '/locallib.php')) {
                require_once($path . '/locallib.php');

                $shortsubtype = substr($subtype, strlen('assign'));
                $pluginclass = 'assign_' . $shortsubtype . '_' . $name;

                $plugin = new $pluginclass($this, $name);

                if ($plugin instanceof assign_plugin) {

                    $idx = $plugin->get_sort_order();
                    while (array_key_exists($idx, $result)) {
                        $idx +=1;
                    }
                    $result[$idx] = $plugin;
                }
            }
        }

        ksort($result);
        return $result;
    }
    public function plugin_data_preprocessing(&$defaultvalues) {
        foreach ($this->submissionplugins as $plugin) {
            if ($plugin->is_visible()) {
                $plugin->data_preprocessing($defaultvalues);
            }
        }
    }
    public function custom_update_plugin_instance(aiassign_plugin $plugin, stdClass $formdata)
    {
        if ($plugin->is_visible()) {
            $enabledname = $plugin->get_subtype() . '_' . $plugin->get_type() . '_enabled';
            if (!empty($formdata->$enabledname)) {
                $plugin->enable();
                if (!$plugin->save_settings($formdata)) {
                    throw new \moodle_exception($plugin->get_error());
                    return false;
                }
            } else {
                $plugin->disable();
            }
        }
        return true;
    }

    public function update_plugin_instance(assign_plugin $plugin, stdClass $formdata) {
        custom_update_plugin_instance($plugin, $formdata);
    }

    //temporary fix due to no overriding options in the parent class
//    protected function add_plugin_settings2(aiassign_plugin $plugin, MoodleQuickForm $mform, & $pluginsenabled)
//    {
//        global $CFG;
//        if ($plugin->is_visible() && !$plugin->is_configurable() && $plugin->is_enabled()) {
//            $name = $plugin->get_subtype() . '_' . $plugin->get_type() . '_enabled';
//            $pluginsenabled[] = $mform->createElement('hidden', $name, 1);
//            $mform->setType($name, PARAM_BOOL);
//            $plugin->get_settings($mform);
//            error_log('SOPAAA'.print_r($name,true));
//        } else if ($plugin->is_visible() && $plugin->is_configurable()) {
//            $name = $plugin->get_subtype() . '_' . $plugin->get_type() . '_enabled';
//            $label = $plugin->get_name();
//            $pluginsenabled[] = $mform->createElement('checkbox', $name, '', $label);
//            $helpicon = $this->get_renderer()->help_icon('enabled', $plugin->get_subtype() . '_' . $plugin->get_type());
//            $pluginsenabled[] = $mform->createElement('static', '', '', $helpicon);
//
//            $default = get_config($plugin->get_subtype() . '_' . $plugin->get_type(), 'default');
//            if ($plugin->get_config('enabled') !== false) {
//                $default = $plugin->is_enabled();
//            }
//            $mform->setDefault($plugin->get_subtype() . '_' . $plugin->get_type() . '_enabled', $default);
//
//            $plugin->get_settings($mform);
//
//        }
//    }
    public function update_calendar($coursemoduleid)
    {
        return parent::update_calendar($coursemoduleid); // TODO: Change the autogenerated stub
    }
    public function view($action='', $args = array()) {
        global $PAGE;

        $o = '';
        $mform = null;
        $notices = array();
        $nextpageparams = array();

        if (!empty($this->get_course_module()->id)) {
            $nextpageparams['id'] = $this->get_course_module()->id;
        }

        if (empty($action)) {
            $PAGE->add_body_class('limitedwidth');
        }

        // Handle form submissions first.
        if ($action == 'savesubmission') {
            $action = 'editsubmission';
            if ($this->process_save_submission($mform, $notices)) {
                $action = 'redirect';
                if ($this->can_grade()) {
                    $nextpageparams['action'] = 'grading';
                } else {
                    $nextpageparams['action'] = 'view';
                }
            }
        } else if ($action == 'editprevioussubmission') {
            $action = 'editsubmission';
            if ($this->process_copy_previous_attempt($notices)) {
                $action = 'redirect';
                $nextpageparams['action'] = 'editsubmission';
            }
        } else if ($action == 'lock') {
            $this->process_lock_submission();
            $action = 'redirect';
            $nextpageparams['action'] = 'grading';
        } else if ($action == 'removesubmission') {
            $this->process_remove_submission();
            $action = 'redirect';
            if ($this->can_grade()) {
                $nextpageparams['action'] = 'grading';
            } else {
                $nextpageparams['action'] = 'view';
            }
        } else if ($action == 'addattempt') {
            $this->process_add_attempt(required_param('userid', PARAM_INT));
            $action = 'redirect';
            $nextpageparams['action'] = 'grading';
        } else if ($action == 'reverttodraft') {
            $this->process_revert_to_draft();
            $action = 'redirect';
            $nextpageparams['action'] = 'grading';
        } else if ($action == 'unlock') {
            $this->process_unlock_submission();
            $action = 'redirect';
            $nextpageparams['action'] = 'grading';
        } else if ($action == 'setbatchmarkingworkflowstate') {
            $this->process_set_batch_marking_workflow_state();
            $action = 'redirect';
            $nextpageparams['action'] = 'grading';
        } else if ($action == 'setbatchmarkingallocation') {
            $this->process_set_batch_marking_allocation();
            $action = 'redirect';
            $nextpageparams['action'] = 'grading';
        } else if ($action == 'confirmsubmit') {
            $action = 'submit';
            if ($this->process_submit_for_grading($mform, $notices)) {
                $action = 'redirect';
                $nextpageparams['action'] = 'view';
            } else if ($notices) {
                $action = 'viewsubmitforgradingerror';
            }
        } else if ($action == 'submitotherforgrading') {
            if ($this->process_submit_other_for_grading($mform, $notices)) {
                $action = 'redirect';
                $nextpageparams['action'] = 'grading';
            } else {
                $action = 'viewsubmitforgradingerror';
            }
        } else if ($action == 'gradingbatchoperation') {
            $action = $this->process_grading_batch_operation($mform);
            if ($action == 'grading') {
                $action = 'redirect';
                $nextpageparams['action'] = 'grading';
            }
        } else if ($action == 'submitgrade') {
            if (optional_param('saveandshownext', null, PARAM_RAW)) {
                // Save and show next.
                $action = 'grade';
                if ($this->process_save_grade($mform)) {
                    $action = 'redirect';
                    $nextpageparams['action'] = 'grade';
                    $nextpageparams['rownum'] = optional_param('rownum', 0, PARAM_INT) + 1;
                    $nextpageparams['useridlistid'] = optional_param('useridlistid', $this->get_useridlist_key_id(), PARAM_ALPHANUM);
                }
            } else if (optional_param('nosaveandprevious', null, PARAM_RAW)) {
                $action = 'redirect';
                $nextpageparams['action'] = 'grade';
                $nextpageparams['rownum'] = optional_param('rownum', 0, PARAM_INT) - 1;
                $nextpageparams['useridlistid'] = optional_param('useridlistid', $this->get_useridlist_key_id(), PARAM_ALPHANUM);
            } else if (optional_param('nosaveandnext', null, PARAM_RAW)) {
                $action = 'redirect';
                $nextpageparams['action'] = 'grade';
                $nextpageparams['rownum'] = optional_param('rownum', 0, PARAM_INT) + 1;
                $nextpageparams['useridlistid'] = optional_param('useridlistid', $this->get_useridlist_key_id(), PARAM_ALPHANUM);
            } else if (optional_param('savegrade', null, PARAM_RAW)) {
                // Save changes button.
                $action = 'grade';
                if ($this->process_save_grade($mform)) {
                    $action = 'redirect';
                    $nextpageparams['action'] = 'savegradingresult';
                }
            } else {
                // Cancel button.
                $action = 'redirect';
                $nextpageparams['action'] = 'grading';
            }
        } else if ($action == 'quickgrade') {
            $message = $this->process_save_quick_grades();
            $action = 'quickgradingresult';
        } else if ($action == 'saveoptions') {
            $this->process_save_grading_options();
            $action = 'redirect';
            $nextpageparams['action'] = 'grading';
        } else if ($action == 'saveextension') {
            $action = 'grantextension';
            if ($this->process_save_extension($mform)) {
                $action = 'redirect';
                $nextpageparams['action'] = 'grading';
            }
        } else if ($action == 'revealidentitiesconfirm') {
            $this->process_reveal_identities();
            $action = 'redirect';
            $nextpageparams['action'] = 'grading';
        }

        $returnparams = array('rownum'=>optional_param('rownum', 0, PARAM_INT),
            'useridlistid' => optional_param('useridlistid', $this->get_useridlist_key_id(), PARAM_ALPHANUM));
        $this->register_return_link($action, $returnparams);

        // Include any page action as part of the body tag CSS id.
        if (!empty($action)) {
            $PAGE->set_pagetype('mod-assign-' . $action);
        }
        // Now show the right view page.
        if ($action == 'redirect') {
            $nextpageurl = new moodle_url('/mod/assignquiz/view.php', $nextpageparams);
            $messages = '';
            $messagetype = \core\output\notification::NOTIFY_INFO;
            $errors = $this->get_error_messages();
            if (!empty($errors)) {
                $messages = html_writer::alist($errors, ['class' => 'mb-1 mt-1']);
                $messagetype = \core\output\notification::NOTIFY_ERROR;
            }
            redirect($nextpageurl, $messages, null, $messagetype);
            return;
        } else if ($action == 'savegradingresult') {
            $message = get_string('gradingchangessaved', 'assign');
            $o .= $this->view_savegrading_result($message);
        } else if ($action == 'quickgradingresult') {
            $mform = null;
            $o .= $this->view_quickgrading_result($message);
        } else if ($action == 'gradingpanel') {
            $o .= $this->view_single_grading_panel($args);
        } else if ($action == 'grade') {
            $o .= $this->view_single_grade_page($mform);
        } else if ($action == 'viewpluginassignfeedback') {
            $o .= $this->view_plugin_content('assignfeedback');
        } else if ($action == 'viewpluginassignsubmission') {
            $o .= $this->view_plugin_content('assignsubmission');
        } else if ($action == 'editsubmission') {
            $PAGE->add_body_class('limitedwidth');
            $o .= $this->view_edit_submission_page($mform, $notices);
        } else if ($action == 'grader') {
            $o .= $this->view_grader();
        } else if ($action == 'grading') {
            $o .= $this->view_grading_page();
        } else if ($action == 'downloadall') {
            $o .= $this->download_submissions();
        } else if ($action == 'submit') {
            $o .= $this->check_submit_for_grading($mform);
        } else if ($action == 'grantextension') {
            $o .= $this->view_grant_extension($mform);
        } else if ($action == 'revealidentities') {
            $o .= $this->view_reveal_identities_confirm($mform);
        } else if ($action == 'removesubmissionconfirm') {
            $o .= $this->view_remove_submission_confirm();
        } else if ($action == 'plugingradingbatchoperation') {
            $o .= $this->view_plugin_grading_batch_operation($mform);
        } else if ($action == 'viewpluginpage') {
            $o .= $this->view_plugin_page();
        } else if ($action == 'viewcourseindex') {
//            $o .= $this->view_course_index();
        } else if ($action == 'viewbatchsetmarkingworkflowstate') {
            $o .= $this->view_batch_set_workflow_state($mform);
        } else if ($action == 'viewbatchmarkingallocation') {
            $o .= $this->view_batch_markingallocation($mform);
        } else if ($action == 'viewsubmitforgradingerror') {
            $o .= $this->view_error_page(get_string('submitforgrading', 'assign'), $notices);
        } else if ($action == 'fixrescalednullgrades') {
            $o .= $this->view_fix_rescaled_null_grades();
        } else {
            $PAGE->add_body_class('limitedwidth');
            $o .= $this->view_submission_page();
        }

        return $o;
    }

    public function view_student_summary($user, $showlinks) {

        $o = '';

        if ($this->can_view_submission($user->id)) {
            if (has_capability('mod/assign:viewownsubmissionsummary', $this->get_context(), $user, false)) {
                // The user can view the submission summary.
                $submissionstatus = $this->get_assign_submission_status_renderable($user, $showlinks);
                $o .= $this->get_renderer()->render($submissionstatus);
            }

            // If there is a visible grade, show the feedback.
            $feedbackstatus = $this->get_assign_feedback_status_renderable($user);
            if ($feedbackstatus) {
                $o .= $this->get_renderer()->render($feedbackstatus);
            }

            // If there is more than one submission, show the history.
            $history = $this->get_assign_attempt_history_renderable($user);
            if (count($history->submissions) > 1) {
                $o .= $this->get_renderer()->render($history);
            }
        }
        return $o;
    }
    public function get_assign_submission_status_renderable($user, $showlinks) {
        global $PAGE;

        $instance = $this->get_instance();
        $flags = $this->get_user_flags($user->id, false);
        $submission = $this->get_user_submission($user->id, false);

        $teamsubmission = null;
        $submissiongroup = null;
        $notsubmitted = array();
        if ($instance->teamsubmission) {
            $teamsubmission = $this->get_group_submission($user->id, 0, false);
            $submissiongroup = $this->get_submission_group($user->id);
            $groupid = 0;
            if ($submissiongroup) {
                $groupid = $submissiongroup->id;
            }
            $notsubmitted = $this->get_submission_group_members_who_have_not_submitted($groupid, false);
        }

        $showedit = $showlinks &&
            ($this->is_any_submission_plugin_enabled()) &&
            $this->can_edit_submission($user->id);

        $submissionlocked = ($flags && $flags->locked);

        // Grading criteria preview.
        $gradingmanager = get_grading_manager($this->get_context(), 'mod_assign', 'submissions');
        $gradingcontrollerpreview = '';
        if ($gradingmethod = $gradingmanager->get_active_method()) {
            $controller = $gradingmanager->get_controller($gradingmethod);
            if ($controller->is_form_defined()) {
                $gradingcontrollerpreview = $controller->render_preview($PAGE);
            }
        }

        $showsubmit = ($showlinks && $this->submissions_open($user->id));
        $showsubmit = ($showsubmit && $this->show_submit_button($submission, $teamsubmission, $user->id));

        $extensionduedate = null;
        if ($flags) {
            $extensionduedate = $flags->extensionduedate;
        }
        $viewfullnames = has_capability('moodle/site:viewfullnames', $this->get_context());

        $gradingstatus = $this->get_grading_status($user->id);
        $usergroups = $this->get_all_groups($user->id);
        $submissionstatus = new mod_assignquiz\output\aiassign_submission_status($instance->allowsubmissionsfromdate,
            $instance->alwaysshowdescription,
            $submission,
            $instance->teamsubmission,
            $teamsubmission,
            $submissiongroup,
            $notsubmitted,
            $this->is_any_submission_plugin_enabled(),
            $submissionlocked,
            $this->is_graded($user->id),
            $instance->duedate,
            $instance->cutoffdate,
            $this->get_submission_plugins(),
            $this->get_return_action(),
            $this->get_return_params(),
            $this->get_course_module()->id,
            $this->get_course()->id,
            assign_submission_status::STUDENT_VIEW,
            $showedit,
            $showsubmit,
            $viewfullnames,
            $extensionduedate,
            $this->get_context(),
            $this->is_blind_marking(),
            $gradingcontrollerpreview,
            $instance->attemptreopenmethod,
            $instance->maxattempts,
            $gradingstatus,
            $instance->preventsubmissionnotingroup,
            $usergroups,
            $instance->timelimit);
        return $submissionstatus;
    }

    protected function view_submission_page() {
        global $CFG, $DB, $USER, $PAGE;

        $instance = $this->get_instance();

        $this->add_grade_notices();

        $o = '';

        $postfix = '';
        if ($this->has_visible_attachments() && (!$this->get_instance($USER->id)->submissionattachments)) {
            $postfix = $this->render_area_files('mod_assign', ASSIGN_INTROATTACHMENT_FILEAREA, 0);
        }

        $o .= $this->get_renderer()->render(new assign_header($instance,
            $this->get_context(),
            $this->show_intro(),
            $this->get_course_module()->id,
            '', '', $postfix));

        // Display plugin specific headers.
        $plugins = array_merge($this->get_submission_plugins(), $this->get_feedback_plugins());
        foreach ($plugins as $plugin) {
            if ($plugin->is_enabled() && $plugin->is_visible()) {
                $o .= $this->get_renderer()->render(new assign_plugin_header($plugin));
            }
        }

        if ($this->can_view_grades()) {
            $actionbuttons = new \mod_assign\output\actionmenu($this->get_course_module()->id);
            $o .= $this->get_renderer()->submission_actionmenu($actionbuttons);

            $summary = $this->get_assign_grading_summary_renderable();
            $o .= $this->get_renderer()->render($summary);
        }

        if ($this->can_view_submission($USER->id)) {
            $o .= $this->view_submission_action_bar($instance, $USER);
            $o .= $this->view_student_summary($USER, true);
        }

        $o .= $this->view_footer();

        \mod_assign\event\submission_status_viewed::create_from_assign($this)->trigger();

        return $o;
    }
    public function show_intro() {
        if ($this->get_instance()->alwaysshowdescription ||
            time() > $this->get_instance()->allowsubmissionsfromdate) {
            return true;
        }
        return false;
    }

    public function view_submission_action_bar(stdClass $instance, stdClass $user): string {
        $submission = $this->get_user_submission($user->id, false);
        // Figure out if we are team or solitary submission.
        $teamsubmission = null;
        if ($instance->teamsubmission) {
            $teamsubmission = $this->get_group_submission($user->id, 0, false);
        }

        $showsubmit = ($this->submissions_open($user->id)
            && $this->show_submit_button($submission, $teamsubmission, $user->id));
        $showedit = ($this->is_any_submission_plugin_enabled()) && $this->can_edit_submission($user->id);

        // The method get_group_submission() says that it returns a stdClass, but it can return false >_>.
        if ($teamsubmission === false) {
            $teamsubmission = new stdClass();
        }
        // Same goes for get_user_submission().
        if ($submission === false) {
            $submission = new stdClass();
        }
        $actionbuttons = new \mod_assign\output\user_submission_actionmenu(
            $this->get_course_module()->id,
            $showsubmit,
            $showedit,
            $submission,
            $teamsubmission,
5
//            $instance->timelimit
        );

        return $this->get_renderer()->render($actionbuttons);
    }
    public function get_assign_grading_summary_renderable($activitygroup = null) {

        $instance = $this->get_default_instance(); // Grading summary requires the raw dates, regardless of relativedates mode.
        $cm = $this->get_course_module();
        $course = $this->get_course();

        $draft = ASSIGN_SUBMISSION_STATUS_DRAFT;
        $submitted = ASSIGN_SUBMISSION_STATUS_SUBMITTED;
        $isvisible = $cm->visible;

        if ($activitygroup === null) {
            $activitygroup = groups_get_activity_group($cm);
        }

        if ($instance->teamsubmission) {
            $warnofungroupedusers = assign_grading_summary::WARN_GROUPS_NO;
            $defaultteammembers = $this->get_submission_group_members(0, true);
            if (count($defaultteammembers) > 0) {
                if ($instance->preventsubmissionnotingroup) {
                    $warnofungroupedusers = assign_grading_summary::WARN_GROUPS_REQUIRED;
                } else {
                    $warnofungroupedusers = assign_grading_summary::WARN_GROUPS_OPTIONAL;
                }
            }

            $summary = new assign_grading_summary(
                $this->count_teams($activitygroup),
                $instance->submissiondrafts,
                $this->count_submissions_with_status($draft, $activitygroup),
                $this->is_any_submission_plugin_enabled(),
                $this->count_submissions_with_status($submitted, $activitygroup),
//                $this->get_cutoffdate($activitygroup),
                $this->get_duedate($activitygroup),
                //$this->get_timelimit($activitygroup),
                $this->get_course_module()->id,
                $this->count_submissions_need_grading($activitygroup),
                $instance->teamsubmission,
                $warnofungroupedusers,
                $course->relativedatesmode,
                $course->startdate,
                $this->can_grade(),
                $isvisible,
                $this->get_course_module()
            );
        } else {

            // The active group has already been updated in groups_print_activity_menu().
            $countparticipants = $this->count_participants($activitygroup);
            $summary = new assign_grading_summary(
                $countparticipants,
                $instance->submissiondrafts,
                $this->count_submissions_with_status($draft, $activitygroup),
                $this->is_any_submission_plugin_enabled(),
                $this->count_submissions_with_status($submitted, $activitygroup),
//                $this->get_cutoffdate($activitygroup),
                $this->get_duedate($activitygroup),
                //$this->get_timelimit($activitygroup),
                $this->get_course_module()->id,
                $this->count_submissions_need_grading($activitygroup),
                $instance->teamsubmission,
                assign_grading_summary::WARN_GROUPS_NO,
                $course->relativedatesmode,
                $course->startdate,
                $this->can_grade(),
                $isvisible,
                $this->get_course_module()
            );
        }

        return $summary;
    }
    private function get_cutoffdate(?int $activitygroup = null): int {
        //error_log('ESTE ES EL VALOR DE ACTIVITY GROUP: '.print($activitygroup));
        if ($activitygroup === null) {
            $activitygroup = groups_get_activity_group($this->get_course_module());
        }
        if ($this->can_view_grades() && !empty($activitygroup)) {
            $groupoverride = $this->get_override_data($activitygroup);
            if (!empty($groupoverride->cutoffdate)) {
                return $groupoverride->cutoffdate;
            }
        }

        return $this->get_instance()->cutoffdate;
    }
    private function get_override_data(int $activitygroup) {
        global $DB;

        $instanceid = $this->get_instance()->id;
        $cachekey = "$instanceid-$activitygroup";
        if (isset($this->overridedata[$cachekey])) {
            return $this->overridedata[$cachekey];
        }

        $params = ['groupid' => $activitygroup, 'assignid' => $instanceid];
        $this->overridedata[$cachekey] = $DB->get_record('assign_overrides', $params);
        return $this->overridedata[$cachekey];
    }
    private function get_duedate($activitygroup = null) {
        if ($activitygroup === null) {
            $activitygroup = groups_get_activity_group($this->get_course_module());
        }
        if ($this->can_view_grades() && !empty($activitygroup)) {
            $groupoverride = $this->get_override_data($activitygroup);
            if (!empty($groupoverride->duedate)) {
                return $groupoverride->duedate;
            }
        }
        return $this->get_instance()->duedate;
    }
    public function set_module_viewed()
    {
        $completion = new completion_info($this->get_course());
        $completion->set_module_viewed($this->get_course_module());

        // Trigger the course module viewed event.
        $assigninstance = $this->get_instance();
        $params = [
            'objectid' => $assigninstance->id,
            'context' => $this->get_context()
        ];
        if ($this->is_blind_marking()) {
            $params['anonymous'] = 1;
        }

        $event = \mod_aiquiz\event\course_module_viewed::create($params);

        $event->add_record_snapshot('aiassign', $assigninstance);
        $event->trigger();
    }
    private function calculate_properties(\stdClass $record, int $userid) : \stdClass {
        $record = clone ($record);

        // Relative dates.
        if (!empty($record->duedate)) {
            $course = $this->get_course();
            $usercoursedates = course_get_course_dates_for_user_id($course, $userid);
            if ($usercoursedates['start']) {
                $userprops = ['duedate' => $record->duedate + $usercoursedates['startoffset']];
                $record = (object) array_merge((array) $record, (array) $userprops);
            }
        }
        return $record;
    }
    public function get_instance(int $userid = null): stdClass
    {
        global $USER;
        $userid = $userid ?? $USER->id;

        $this->instance = $this->get_default_instance();

        // If we have the user instance already, just return it.
        if (isset($this->userinstances[$userid])) {
            return $this->userinstances[$userid];
        }

        // Calculate properties which vary per user.
        $this->userinstances[$userid] = $this->calculate_properties($this->instance, $userid);

        return $this->userinstances[$userid];
    }
    public function get_assign_instance(){
        global $DB;
        return $DB->get_record('aiassign', array('assignquizid' => $this->get_course_module()->instance), '*', MUST_EXIST);
    }


    public function get_default_instance()
    {
        global $DB;
        if (!$this->instance && $this->get_course_module()) {
            $params = array('id' => $this->get_course_module()->instance);
            $this->instance = $DB->get_record('assignquiz', $params, '*', MUST_EXIST);

            $this->userinstances = [];
        }
        return $this->instance;
    }

}
